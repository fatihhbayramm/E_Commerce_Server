@page "/category"

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation ConfirmationChanged="ConfirmDelet_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Category</h4>

    </div>
    <div class="col-4 offsett-2">
        <a href="category/create" class="btn btn-primary form-control">Create New Category</a>

    </div>
    <div class="col-12 p-3">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                                                
                    </tr>
                </thead>

            
                 <tboddy>
                @foreach(var category in  Categories)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td>
                            <NavLink href="@($"category/edit/{category.Id}")" class="btn btn-primary">Edit Category</NavLink>
                            <button class="btn btn-danger" @onclick="(()=>HandleDelete(category.Id))">Delete Category </button>
                                
                        </td>

                        
                    </tr>
                  
                }
                </tboddy>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/book.gif" />
                </div>
            }
            else
            {
                <p><strong>No Category Found</strong></p>
            }

        }

    </div>

</div>





@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; } = true;
    public int DeleteCategoryId { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        Categories = await _categoryRepository.GetAll();

        IsLoading = false;
    }
    private void HandleDelete(int id)
    {
        DeleteCategoryId=id;        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelet_Click(bool IsConfirmed)
    {
        if (IsConfirmed && DeleteCategoryId !=0)
        {
            await _categoryRepository.Delete(DeleteCategoryId);
            Categories = await _categoryRepository.GetAll();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }
}
